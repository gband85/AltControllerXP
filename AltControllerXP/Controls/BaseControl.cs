/*
Alt Controller
--------------
Copyright 2013 Tim Brogden
http://altcontroller.net

Description
-----------
A free program for mapping computer inputs, such as pointer movements and button presses, 
to actions, such as key presses. The aim of this program is to help make third-party programs,
such as computer games, more accessible to users with physical difficulties.

License
-------
This file is part of Alt Controller. 
Alt Controller is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Alt Controller is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Alt Controller.  If not, see <http://www.gnu.org/licenses/>.
*/
using System.Collections.Generic;
using AltController.Config;
using AltController.Core;
using AltController.Input;
using AltController.Event;

namespace AltController.Controls
{
    /// <summary>
    /// Base class for input controls
    /// </summary>
    public abstract class BaseControl
    {
        private BaseSource _parent;
        private bool _isActive;

        protected BaseSource Parent { get { return _parent; } }
        public bool IsActive { get { return _isActive; } protected set { _isActive = value; } }
        public abstract List<EEventReason> SupportedEventReasons { get; }

        // Events
        protected event AltControlEventHandler EventHandler;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="parent"></param>
        public BaseControl(BaseSource parent)
        {
            _parent = parent;
        }

        /// <summary>
        /// Handle a change of app config
        /// </summary>
        /// <param name="appConfig"></param>
        public virtual void SetAppConfig(AppConfig appConfig)
        {
        }

        /// <summary>
        /// Connect or disconnect the event handler
        /// </summary>
        /// <param name="handler"></param>
        /// <param name="enable"></param>
        public virtual void Connect(AltControlEventHandler handler, bool enable)
        {
            if (enable && EventHandler == null)
            {
                EventHandler += handler;
            }
            else if (!enable && EventHandler != null)
            {
                EventHandler -= handler;
            }
        }

        /// <summary>
        /// Raise an input event
        /// </summary>
        /// <param name="args"></param>
        protected void RaiseEvent(AltControlEventArgs args)
        {
            EventHandler(this, args);
        }

        /// <summary>
        /// Turn event monitoring on or off
        /// </summary>
        /// <param name="reason"></param>
        /// <param name="handler"></param>
        /// <param name="enable"></param>
        public virtual void ConfigureEventMonitoring(AltControlEventArgs args, bool enable)        
        {            
        }

        /// <summary>
        /// Handle an external event generated by another thread
        /// </summary>
        /// <param name="args"></param>
        public virtual void ReceiveExternalEvent(AltControlEventArgs args)
        {
            // Override in derived classes if required
        }

        /// <summary>
        /// Monitor the state of the control and raise any events
        /// </summary>
        /// <param name="keyManager"></param>
        public abstract void UpdateState(IStateManager stateManager);
    }
}
